{"version":3,"sources":["assets/cc.png","assets/tpmi.png","assets/cacc.png","assets/pm.png","assets/bcdm.png","components/Header/Header.js","components/NavBar/NavBar.js","components/Sample/Sample.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","Component","NavBar","scrollToPastWork","element","document","getElementById","scrollIntoView","scrollToAbout","onClick","this","Sample","openWebsite","displayID","props","window","open","id","src","CajunConnectionScreen","ThePMInternScreen","CarsAgainstCCScreen","PageMasterScreen","BCDMScreen","alt","App","title","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oHAAAA,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,gC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,2OCe5BC,G,mLATX,OACE,yBAAKC,UAAU,UACX,wBAAIA,UAAU,UAAd,SACA,wBAAIA,UAAU,UAAd,iC,GANWC,cC2BNC,G,kNAzBbC,iBAAmB,WACjB,IAAIC,EAAUC,SAASC,eAAe,QACvB,MAAXF,GACFA,EAAQG,kB,EAIZC,cAAgB,WACd,IAAIJ,EAAUC,SAASC,eAAe,SACvB,MAAXF,GACFA,EAAQG,kB,uDAKV,OACE,yBAAKP,UAAU,UACb,wBAAIA,UAAU,eAAeS,QAASC,KAAKP,kBAA3C,aACA,wBAAIH,UAAU,gBAAd,kBACA,wBAAIA,UAAU,gBAAd,gB,GArBaC,c,0FCoDNU,E,4MAvCbC,YAAc,WACZ,IAAIC,EAAY,EAAKC,MAAMD,UACT,OAAdA,EACFE,OAAOC,KAAK,8EACW,QAAdH,EACTE,OAAOC,KAAK,2CACW,SAAdH,EACTE,OAAOC,KAAK,6BACW,2DAAdH,EACTE,OAAOC,KAAK,IACW,SAAdH,GACTE,OAAOC,KAAK,+D,uDAoBd,OACE,yBAAKhB,UAAU,SAASS,QAASC,KAAKE,aACpC,yBAAKZ,UAAU,cAAciB,GAAIP,KAAKI,MAAMD,UAAWK,KAhB/BL,EAgBuDH,KAAKI,MAAMD,UAf1E,OAAdA,EACKM,IACgB,QAAdN,EACFO,IACgB,SAAdP,EACFQ,IACgB,OAAdR,EACFS,IACgB,SAAdT,EACFU,SADF,GAOiGC,IAAI,gBAhB9G,IAA4BX,M,GAnBXZ,aCaNwB,E,uKAlBX,OACE,yBAAKzB,UAAU,OACb,yBAAKA,UAAU,mBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,kBAAC,EAAD,CAAQ0B,MAAM,4BAA4Bb,UAAU,SACpD,yBAAKb,UAAU,mBACb,kBAAC,EAAD,CAAQ0B,MAAM,kBAAkBb,UAAU,SAC1C,kBAAC,EAAD,CAAQa,MAAM,cAAcb,UAAU,OACtC,kBAAC,EAAD,CAAQa,MAAM,mBAAmBb,UAAU,QAE7C,kBAAC,EAAD,CAAQa,MAAM,gCAAgCb,UAAU,a,GAf9CZ,aCME0B,QACW,cAA7BZ,OAAOa,SAASC,UAEe,UAA7Bd,OAAOa,SAASC,UAEhBd,OAAOa,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF5B,SAASC,eAAe,SDyHpB,kBAAmB4B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.13a4de5c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cc.6e862d88.png\";","module.exports = __webpack_public_path__ + \"static/media/tpmi.182f2cd9.png\";","module.exports = __webpack_public_path__ + \"static/media/cacc.4d16278f.png\";","module.exports = __webpack_public_path__ + \"static/media/pm.d8f74582.png\";","module.exports = __webpack_public_path__ + \"static/media/bcdm.2bcc8c84.png\";","import React, { Component } from 'react';\nimport './Header.css';\n\nclass Header extends Component { \n\n  render() {\n    return (\n      <div className=\"header\">          \n          <h1 className=\"logoH1\">Jibra</h1>\n          <h2 className=\"logoH2\">A Software Design Studio</h2>\n      </div>\n    );\n  }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport './NavBar.css';\n\nclass NavBar extends Component {\n\n  scrollToPastWork = () => {\n    let element = document.getElementById(\"cacc\")\n    if (element != null) {\n      element.scrollIntoView()\n    }\n  }\n\n  scrollToAbout = () => {\n    let element = document.getElementById(\"about\")\n    if (element != null) {\n      element.scrollIntoView()\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"navBar\">\n        <h1 className=\"navBarButton\" onClick={this.scrollToPastWork}>Past Work</h1>\n        <h1 className=\"navBarButton\">Our Tech Stack</h1>\n        <h1 className=\"navBarButton\">Contact</h1>\n      </div>\n    );\n  }\n}\n\nexport default NavBar;","import React, { Component } from 'react';\nimport './Sample.css';\nimport CajunConnectionScreen from '../../assets/cc.png';\nimport ThePMInternScreen from '../../assets/tpmi.png';\nimport CarsAgainstCCScreen from '../../assets/cacc.png';\nimport PageMasterScreen from '../../assets/pm.png';\nimport BCDMScreen from '../../assets/bcdm.png';\n\n// let cajunConnectionText = \"Cajun Connection is a social media app made for young proffesionals to give ananayous feedback on each other's resumes, portfolio's, and proffesional work. It allows users to create profiles and form connections with other students/young proffesionals interested in growing their network.\"\n// let theProductManagementInternText = \"The Product Management Intern is a website blog which features content on how what product management internships are like and how to get one. The website was built with React.js and is hosted for free by Github Pages.\"\n// let bcDiningMenusText = \"BC Dining Menus is an iOS application which displays the menus of the 12 diffrent dining halls at BC. The app scrapes information from the hard-to-read BC Dining website and displays it in a friendly format.\"\n// let carsAgainstColonCancerText = \"Cars Against Colon Cancer is an annual car show held in West Hartford by Ben Coady to raise money in memory of his grandmother. He needed a website to help spread the word of his event and give possible partners something to look at. It's built with React.js and uses Firebase for analyzing it's web traffic.\"\n// let pageMasterText = \"Page Master\"\n\nclass Sample extends Component {\n\n  openWebsite = () => {\n    let displayID = this.props.displayID\n    if (displayID === \"cc\") {\n      window.open(\"https://apps.apple.com/gb/app/cajun-connection/id1498694017?ign-mpt=uo%3D2\")\n    } else if (displayID === \"pmi\") {\n      window.open(\"https://theproductmanagementintern.com/\")\n    } else if (displayID === \"cacc\") {\n      window.open(\"http://carsagainstcc.com/\")\n    } else if (displayID === \"https://apps.apple.com/tt/app/page-master/id1474563270\") {\n      window.open(\"\")\n    } else if (displayID === \"bcdm\") {\n      window.open(\"https://apps.apple.com/us/app/bc-dining-menus/id1459940062\")\n    }\n  }\n\n  render() {\n\n    function returnDisplayImage(displayID) {\n      if (displayID === \"cc\") {\n        return CajunConnectionScreen\n      } else if (displayID === \"pmi\") {\n        return ThePMInternScreen\n      } else if (displayID === \"cacc\") {\n        return CarsAgainstCCScreen\n      } else if (displayID === \"pm\") {\n        return PageMasterScreen\n      } else if (displayID === \"bcdm\") {\n        return BCDMScreen\n      }\n    }\n\n    return (\n      <div className=\"sample\" onClick={this.openWebsite}>\n        <img className=\"sampleImage\" id={this.props.displayID} src={returnDisplayImage(this.props.displayID)} alt=\"Screenshot\"/>\n      </div>\n    );\n  }\n}\n\nexport default Sample;","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/Header/Header';\nimport NavBar from './components/NavBar/NavBar';\nimport Sample from './components/Sample/Sample';\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"appContainerOne\">\n          <Header/>\n          <NavBar/>\n        </div>\n        <Sample title=\"Cars Against Colon Cancer\" displayID=\"cacc\"/>\n        <div className=\"appContainerTwo\">\n          <Sample title=\"BC Dining Menus\" displayID=\"bcdm\"/>\n          <Sample title=\"Page Master\" displayID=\"pm\"/>\n          <Sample title=\"Cajun Connection\" displayID=\"cc\"/>\n        </div>\n        <Sample title=\"The Product Management Intern\" displayID=\"pmi\"/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}